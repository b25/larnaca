<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".g.cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>

<#
    //the dbMeta is provided by the Larnaca.Project.Tools 
    //uncomment when using the default T4 generation
    //var projectPath = Host.ResolvePath("../../obj");
    //string resultFile = Path.Combine(projectPath,"result.json");
    //DatabaseMeta dbMeta;
    //if (File.Exists(resultFile))
    //{
    //    dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
    //}
    //else
    //{
    //    dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] };
    //}
#>
<#@ parameter name="dbMeta" type="mssql.collector.types.DatabaseMeta" #>

// <auto-generated>
//     This code was generated  at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Threading.Tasks;
using Microsoft.Extensions.Options;

namespace mssql.adapter.<#= DalUtils.ToPascalCase(dbMeta.Name) #>
{
  public partial class DalService
  {
    private DalServiceOptions options;

    public DalService(IOptions<DalServiceOptions> secrets)
    {
            options = secrets.Value;
    }
    
 <# foreach (var proc in dbMeta.Procedures){ 
   var baseClass=$"{DalUtils.GetBaseClassName(proc.SpName)}";
   var requestClass=$"{baseClass}Request";        
   var responseClass=$"{baseClass}Response";
 #>

     public Task<<#=responseClass#>> <#=baseClass#>(<#=requestClass#> req)
     {
         return dal.<#=proc.SpName#>(req, options.ConnectionString);
     }

 <#}#>
  }

}

<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".g.cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
//collection generation info    
//todo replace later 
var projectPath = Host.ResolvePath("../obj");
string resultFile = Path.Combine(projectPath,"result.json");
DatabaseMeta dbMeta;
if (File.Exists(resultFile))
{
    dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
}
else
{
    dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] }; 
}
#>
// <auto-generated>
//     This code was generated at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.IO;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using ProtoBuf.Grpc.Server;
using System.Threading.Tasks;
using mssql.adapter.<#= DalUtils.ToPascalCase(dbMeta.Name) #>;

namespace mssql.adapter
{
    public static partial class DalHelper
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="services"></param>
        /// <param name="configuration"></param>
        static partial void ConfigureServicesImpl(IServiceCollection services, IConfiguration configuration)
        {
            services.AddGrpcHealthChecks()
              .AddAsyncCheck("", () =>
              {
                  return Task.FromResult(HealthCheckResult.Healthy());
              }, Array.Empty<string>());
            services.AddCors(o => o.AddPolicy("AllowAll", builder =>
              {
                  builder.AllowAnyOrigin()
                         .AllowAnyMethod()
                         .AllowAnyHeader()
                         .WithExposedHeaders("Grpc-Status", "Grpc-Message", "Grpc-Encoding", "Grpc-Accept-Encoding");
              }));

            services
              .Configure<DalServiceOptions>(configuration.GetSection(nameof(DalServiceOptions)))
              .AddOptions()
              .AddSingleton<DalService>()
              .AddControllers();

            services.AddCodeFirstGrpc(config =>
              {
                  config.ResponseCompressionLevel = System.IO.Compression.CompressionLevel.Optimal;
              });

            services.AddCodeFirstGrpcReflection();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        static partial void ConfigureImpl(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseRouting();
            app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });

            app.UseEndpoints(endpoints =>
              {
                  endpoints.MapControllerRoute(
                  name: "default",
                  pattern: "{controller=Home}/{action=Index}/{id?}");

                  endpoints.MapGet("/", async context =>
                  {
                      await context.Response.WriteAsync("Larnaca Framework v 1.0.0");
                  });

                // health checks
                endpoints.MapHealthChecks("/health");
                  endpoints.MapGrpcHealthChecksService();

                  endpoints.MapGrpcService<DalGrpc>();
                  endpoints.MapCodeFirstGrpcReflectionService();
              });
        }
    }
}

<#@ template language="C#" hostspecific="True" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
//collection generation info    
//todo replace later 
     var projectPath = Host.ResolvePath("../obj");
    string resultFile = Path.Combine(projectPath,"result.json");
    DatabaseMeta dbMeta;
    if(File.Exists(resultFile))
    {
        dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
    }
    else
    {
        dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] }; 
    }
   
#>
// <auto-generated>
//     This code was generated  at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using ProtoBuf;
namespace <#= dbMeta.Name #>
{

<# foreach (var proc in dbMeta.Procedures){ #>
#region <#= $"{DalUtils.GetBaseClassName(proc.SpName)}Request"#> .. 
[DataContract]
public partial class <#= $"{DalUtils.GetBaseClassName(proc.SpName)}Request"#>
{
  <# foreach (var param in proc.Request){ #>
 [DataMember(Order = <#= param.Order #>)]
   public <#= DalUtils.GetCSharpFriendlyType(param.SqlType,$"TVP{param.Name}")#> <#= DalUtils.ToPascalCase(param.Name) #> { get; set; }
  <# } //end foreach proc.Request #>
  <# foreach (var param in  proc.Request.Where(x => x.TVP!=null)){ #>
    #region <#= $"TVP{param.Name}" #> ..    
    [DataContract]
    public class <#= $"TVP{param.Name}"#>
    {   
       <# foreach (var p in  param.TVP){ #>
           <# if(DalUtils.IsDatetime(p.SqlType)){#>
           [ProtoMember(<#= p.Order #>, DataFormat = DataFormat.WellKnown)]
           <#} else { #>
           [DataMember(Order = <#= p.Order #>)]
            <#}#>
            public <#= DalUtils.GetCSharpFriendlyType(p.SqlType,null)#> <#= DalUtils.ToPascalCase(p.Name) #> { get; set; }
       <# } //end foreach proc.Request.TVP params #>  
    }
    #endregion
<# } //end foreach proc.Request.TVP #>

}
#endregion

<# } //end foreach dbMeta.Procedures #>
   
     
}

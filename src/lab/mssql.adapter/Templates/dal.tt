<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".g.cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
//collection generation info    
//todo replace later 
var projectPath = Host.ResolvePath("../obj");
string resultFile = Path.Combine(projectPath,"result.json");
DatabaseMeta dbMeta;
if (File.Exists(resultFile))
{
    dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
}
else
{
    dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] };
}
#>
// <auto-generated>
//     This code was generated at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using standard.types;
using mssql.utils;

namespace mssql.adapter.<#= DalUtils.ToPascalCase(dbMeta.Name) #>
{
    public static partial class dal
    {
<#
foreach (var proc in dbMeta.Procedures)
{ 
    var requestClass=$"{DalUtils.GetBaseClassName(proc.SpName)}Request";        
    var responseClass=$"{DalUtils.GetBaseClassName(proc.SpName)}Response";
#>
        #region <#= $"{DalUtils.GetBaseClassName(proc.SpName)}"#> .. 
        public static async Task<<#= responseClass#>>  <#= proc.SpName #> (<#= requestClass #> req,string connectionString,bool strict = false)
        {
            try
            {  
                if (req==null)
                {
                    return new <#= responseClass #> { StatusCode = (int)EOperationCode.Error, StatusMessage = "abort call, request is null" };
                }    

                using (var dr = new DataReader(connectionString))
                {
		            #region generate sql command..
                    using (var cmd = new SqlCommand { CommandText = "<#= proc.SpName #>" })
		            {
                        #region add parameters..
<#
    foreach (var p in proc.Request)
    {
#>

                        #region <#= p.Name #>.. 
<#
        if (p.TVP!=null)
        {
#>
               
                        var dt_<#= p.Name #>=new DataTable();
                        #region add datatable columns..
<#
            foreach (var x in p.TVP)
            {
#>
                        dt_<#= p.Name #>.Columns.Add("<#= x.Name #>", typeof(<#= DalUtils.GetBaseCSharpType(x.SqlType) #>));
<#
            }
#>
                        #endregion 
                        #region  add rows..
                        foreach (var item in req.<#= DalUtils.ToPascalCase(p.Name) #>)
                        {
                            var row = dt_<#= p.Name #>.NewRow(); 

<#
            foreach (var x in p.TVP)
            {
#>
                            row["<#= x.Name #>"] = item.<#= DalUtils.ToPascalCase(x.Name) #>;
<#
            }
#>

                            dt_<#= p.Name #>.Rows.Add(row);
                        }
                        #endregion 

                        cmd.Parameters.Add(new SqlParameter
		                {
					        Direction = ParameterDirection.Input,
					        ParameterName = @"<#= p.Name #>",
					        SqlDbType = SqlDbType.Structured,
					        Value = dt_<#= p.Name #>
			            });
<#
        }
        else
        {
#>

                        if (req.<#= DalUtils.ToPascalCase(p.Name) #> == null)
                        {
                            cmd.Parameters.Add(new SqlParameter
		                    {
					            Direction = ParameterDirection.Input,
					            ParameterName = @"<#= p.Name #>",
					            SqlDbType = SqlDbType.<#= DalUtils.GetSqlDbType(p.SqlType) #>,
					            Value = DBNull.Value
			                });
                        }
                        else
                        {
                            cmd.Parameters.Add(new SqlParameter
		                    {
					            Direction = ParameterDirection.Input,
					            ParameterName = @"<#= p.Name #>",
					            SqlDbType = SqlDbType.<#= DalUtils.GetSqlDbType(p.SqlType) #>,
					            Value = req.<#= DalUtils.ToPascalCase(p.Name) #>
			                });
                        }
<#
        }
#>
                        #endregion
    
<#
    } //end foreach proc.Request
#>

                        #endregion add parameters
          
			            await dr.ExecuteSpAsync(cmd).ConfigureAwait(false);
			        } 
                    #endregion

                    var resp = new <#= responseClass #>{ StatusCode = (int)EOperationCode.Ok };
                    List<string> errors;
                    DataReaderColumnDefinition[] columnDef;
<#
    for (var i=0;i<proc.Responses.Count;i++)
    {
        var p=proc.Responses[i];
#>
         
<#
        if (i==0 && p.IsOperationResult())
        {
#>
                    #region OperationResult..
                    columnDef = new DataReaderColumnDefinition[] {
                        new DataReaderColumnDefinition("StatusCode", typeof(int)),
                        new DataReaderColumnDefinition("StatusMessage", typeof(string))
                    };
                    errors = dr.ValidateColumns(columnDef, strict);
                
                    if (errors.Any())
                    {
                        return new <#= responseClass #> { StatusCode = (int)EOperationCode.Error, StatusMessage = string.Join("\r\n",errors) };
                    }

                    await dr.ReadAsync().ConfigureAwait(false);

                    resp.StatusCode = dr.GetInt32(columnDef[0].Order) ?? (int)EOperationCode.Error;
                    resp.StatusMessage = dr.GetString(columnDef[1].Order);

                    if (resp.StatusCode!=(int)EOperationCode.Ok)
                    {
                        return resp;
                    }
                    #endregion
<#
        }
        else
        {
#>
                    #region  <#= p.Name #>..
<#
            if (i>0)
            {
#>
                    await dr.NextResultAsync().ConfigureAwait(false);
<#
            }
#>
                    //build columdef
                    columnDef = new DataReaderColumnDefinition[] {
<#
            for (var j=0; j<p.Params.Count; j++)
            {
                var x=p.Params[j];
#>
                        new DataReaderColumnDefinition("<#= x.Name #>", typeof(<#= DalUtils.GetCSharpFriendlyType(x.SqlType,null) #>))<#= ((j+1)<p.Params.Count ? "," : "") #>               
<#
            }
#>
                    };
                    errors = dr.ValidateColumns(columnDef, strict);

                    if (errors.Any())
                    {
                        return new <#= responseClass #> { StatusCode = (int)EOperationCode.Error, StatusMessage = string.Join("\r\n",errors) };
                    } 
           
                    resp.<#= p.Name #> = new List<<#= $"{responseClass}.{DalUtils.GetBaseClassName(proc.SpName)}Item{(p.Order-2)}" #>>(); 
            
                    while(await dr.ReadAsync().ConfigureAwait(false))
                    {
                        resp.<#= p.Name #>.Add(new <#= $"{responseClass}.{DalUtils.GetBaseClassName(proc.SpName)}Item{(p.Order-2)}" #>
                        {
<#
            for (var j=0; j<p.Params.Count; j++)
            {
                var x=p.Params[j];
#>
                            <#= DalUtils.ToPascalCase(x.Name) #> = (columnDef[<#= j #>].Order >= 0 ? <#= DalUtils.GenerateDataRowReadValue(x.SqlType, $@"columnDef[{j}].Order")#> : default)<#= ((j+1)<p.Params.Count ? "," : "") #>
<#
            }
#>
                        });
                    }

                    #endregion
<#
        }
    }
#>

                   return resp;
	            }
            }
            catch(Exception ex)
            {
              return new <#= responseClass #> { StatusCode = (int)EOperationCode.UnhandledError, StatusMessage = $"<#= proc.SpName #>: {ex.Message}" };    
            }
        }
        #endregion

<#
} //end foreach dbMeta.Procedures
#>
    }
}

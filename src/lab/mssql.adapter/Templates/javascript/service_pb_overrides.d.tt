<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".ts"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
//collection generation info    
//todo replace later 
var projectPath = Host.ResolvePath("../../obj");
string resultFile = Path.Combine(projectPath,"result.json");
DatabaseMeta dbMeta;
if (File.Exists(resultFile))
{
    dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
}
else
{
    dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] };
}
#>
// <auto-generated>
//     This code was generated at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// package: mssql.adapter.<#= DalUtils.ToPascalCase(dbMeta.Name) #>
// file: service.proto

/* tslint:disable */
/* eslint-disable */

import * as service from "./service_pb";
import * as protobuf_net_bcl_pb from "./protobuf-net/bcl_pb";

<#
foreach (var proc in dbMeta.Procedures)
{
    var baseClassName=DalUtils.GetBaseClassName(proc.SpName);
#>

export declare class <#= $"{baseClassName}Request" #> extends service.<#= $"{baseClassName}Request" #> {
<#
    foreach (var param in proc.Request)
    {
        string memberType;
        if (param.TVP!=null)
        {
            var t=DalUtils.GetJavascriptFriendlyType("structured",$"TVP{param.Name}");
            memberType=$"Array<{t}>";
        }
        else
        {
            memberType=DalUtils.GetJavascriptFriendlyType(param.SqlType,$"TVP{param.Name}");
        }

        var memberName=DalUtils.ToProtoCase(param.Name);
#>
    get<#= memberName#>(): <#= memberType #> | undefined;
    set<#= memberName#>(value?: <#= memberType #>): <#= $"{baseClassName}Request" #>;

<#
    } //end foreach proc.Request
#>
}

<#
    foreach (var param in proc.Request.Where(x => x.TVP!=null))
    {
#>
export declare class <#= $"TVP{param.Name}" #> extends service.<#= $"TVP{param.Name}" #> {   
<#
        foreach (var p in  param.TVP)
        { 
            var memberType=DalUtils.GetJavascriptFriendlyType(p.SqlType,null);
            var memberName=DalUtils.ToProtoCase(p.Name);
#>
    get<#= memberName#>(): <#= memberType #> | undefined;
    set<#= memberName#>(value?: <#= memberType #>): <#= $"TVP{param.Name}" #>;
<#
        } //end foreach param.TVP
#>
}
<#
    } //end foreach proc.Request.TVP
#>

export declare class <#= $"{baseClassName}Response" #> extends service.<#= $"{baseClassName}Response" #> {
<#
    foreach (var param in proc.Responses.Where(x=>(x.Order>0)))
    {
        var memberType=$"{baseClassName}Item{(param.Order-2)}";
        var memberName=DalUtils.ToProtoCase(param.Name);
    } //end foreach proc.Responses
#>
}
<#
    if (proc.Responses.Any(x=>(x.Order>0)))
    {
        foreach (var param in proc.Responses.Where(x=>(x.Order>0)))
        { 
            var responseParamClassName=$"{baseClassName}Item{(param.Order-2)}";
#>

export declare class <#= responseParamClassName #> extends service.<#= responseParamClassName #> {
<#
            foreach (var p in param.Params)
            { 
                var memberType=DalUtils.GetJavascriptFriendlyType(p.SqlType,null);
                var memberName=DalUtils.ToProtoCase(p.Name);
#>
    get<#= memberName#>(): <#= memberType #> | undefined;
    set<#= memberName#>(value?: <#= memberType #>): <#= responseParamClassName #>;

<#
            } //end foreach param.Params
#>
}
<#
        } //end foreach proc.Responses
    } //end if proc.Responses
} //end foreach dbMeta.Procedures
#>

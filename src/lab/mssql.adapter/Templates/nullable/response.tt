<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".g.cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
    //collection generation info    
    //todo replace later 
    var projectPath = Host.ResolvePath("../../obj");
    string resultFile = Path.Combine(projectPath,"result.json");
    DatabaseMeta dbMeta;
    if(File.Exists(resultFile))
    {
        dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
    }
    else
    {
        dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] }; 
    }
#>
// <auto-generated>
//     This code was generated  at <#=        DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using ProtoBuf;
namespace <#=        dbMeta.Name #>N
{

<#    foreach (var proc in dbMeta.Procedures){ #>

#region <#= $"{DalUtils.GetBaseClassName(proc.SpName)}Response"#> .. 
[DataContract]
public partial class <#=$"{DalUtils.GetBaseClassName(proc.SpName)}Response"#>
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

 <#foreach (var param in proc.Responses.Where(x=>(x.Order>0))){ #>
    [DataMember(Order = <#= param.Order #>)]
    public List<<#=$"{DalUtils.GetBaseClassName(proc.SpName)}Item{(param.Order-2)}"#>> <#= param.Name #> { get; set; }

 <#}#>
 
 
 <#if (proc.Responses.Any(x=>(x.Order>0))){ #>
    #region inner classes .. 
     <#foreach (var param in proc.Responses.Where(x=>(x.Order>0))){ #>

    [DataContract]
    public class <#=$"{DalUtils.GetBaseClassName(proc.SpName)}Item{(param.Order-2)}"#>
    {
        <#foreach (var p in param.Params){ #>
            <# if(DalUtils.IsDatetime(p.SqlType)){#>
              [DataMember(Order = <#= p.Order #>)] //[ProtoMember(<#= p.Order#>)]
            <#} else { #>
            [DataMember(Order=<#= p.Order #>)]
            <#}#>
            public <#= DalUtils.GetCSharpNullableFriendlyType(p.SqlType,null)#> <#= DalUtils.ToPascalCase(p.Name) #> { get; set; }

         <# }#>

    }
    <#}#> 
    #endregion
 <#}#>
 
}
#endregion

<#    } //end foreach dbMeta.Procedures #>
  
     
}

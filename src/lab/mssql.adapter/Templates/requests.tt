<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".g.cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\mssql.collector.types.dll" #>
<#@ import namespace="mssql.collector.types" #>
<#@ assembly name="$(SolutionDir)\bin\$(ConfigurationName)\netcoreapp3.1\gen.utils.dll" #>
<#@ import namespace="gen.utils" #>
<#
//collection generation info    
//todo replace later 
     var projectPath = Host.ResolvePath("../obj");
    string resultFile = Path.Combine(projectPath,"result.json");
    DatabaseMeta dbMeta;
    if(File.Exists(resultFile))
    {
        dbMeta=JsonConvert.DeserializeObject<DatabaseMeta>(File.ReadAllText(resultFile));
    }
    else
    {
        dbMeta=new DatabaseMeta{Name="could_not_found_the_result_file",Procedures=new ProcedureMeta[0] }; 
    }
   
#>
// <auto-generated>
//     This code was generated  at <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") #> 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using ProtoBuf;
using collection.extensions;
namespace <#= dbMeta.Name #>
{

<# foreach (var proc in dbMeta.Procedures){ #>
#region <#= $"{DalUtils.GetBaseClassName(proc.SpName)}Request"#> .. 
[DataContract]
public partial class <#= $"{DalUtils.GetBaseClassName(proc.SpName)}Request"#>
{
  <#        foreach (var param in proc.Request){ 
  var memberType=DalUtils.GetCSharpNullableFriendlyType(param.SqlType,$"TVP{param.Name}");
  var memberName=DalUtils.ToPascalCase(param.Name);
 #>
 <#= memberType #> _<#= memberName#>;
[DataMember(Order = <#= param.Order #>)]
   public <#=memberType #> <#= memberName#> { get { return _GetNullableValue(_<#= memberName#>, <#= param.Order#>); } set { _<#= memberName#> = value; _SetNullable(_<#= memberName#>==null,<#= param.Order#>); } }
  <# } //end foreach proc.Request #>

#region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=<#= proc.Request.Max(x=>x.Order) #>;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion

  
  <# foreach (var param in  proc.Request.Where(x => x.TVP!=null)){ #>
    #region <#= $"TVP{param.Name}" #> ..    
    [DataContract]
    public class <#= $"TVP{param.Name}"#>
    {   
       <# foreach (var p in  param.TVP){ 
 var memberType=DalUtils.GetCSharpNullableFriendlyType(p.SqlType,null);
  var memberName=DalUtils.ToPascalCase(p.Name);
#>


          <#= memberType #> _<#= memberName#>;
[DataMember(Order = <#= p.Order #>)]
   public <#=memberType #> <#= memberName#> { get { return _GetNullableValue(_<#= memberName#>, <#= p.Order#>); } set { _<#= memberName#> = value; _SetNullable(_<#= memberName#>==null,<#= p.Order#>); } }
 
       <# } //end foreach proc.Request.TVP params #>

#region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=<#= param.TVP.Max(x=>x.Order) #>;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
    }
    #endregion
<# } //end foreach proc.Request.TVP #>

}
#endregion

<# } //end foreach dbMeta.Procedures #>
   
     
}

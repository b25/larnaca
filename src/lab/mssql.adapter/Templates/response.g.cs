// <auto-generated>
//     This code was generated  at 2020-07-31 21:08:37.540 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using ProtoBuf;
using collection.extensions;
namespace beatroot_bo
{


#region TypesGetResponse .. 
[DataContract]
public partial class TypesGetResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<TypesGetItem1> ResultSet1 { get; set; }

     [DataMember(Order = 4)]
    public List<TypesGetItem2> ResultSet2 { get; set; }

     [DataMember(Order = 5)]
    public List<TypesGetItem3> ResultSet3 { get; set; }

     [DataMember(Order = 6)]
    public List<TypesGetItem4> ResultSet4 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class TypesGetItem1
    {
        
   short? _Id;
   [DataMember(Order = 1)]
   public short? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   string _Description;
   [DataMember(Order = 3)]
   public string Description { get { return _GetNullableValue(_Description, 3); } set { _Description = value; _SetNullable(_Description==null,3); } }

         
   string _RegExp;
   [DataMember(Order = 4)]
   public string RegExp { get { return _GetNullableValue(_RegExp, 4); } set { _RegExp = value; _SetNullable(_RegExp==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetItem2
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Category;
   [DataMember(Order = 2)]
   public string Category { get { return _GetNullableValue(_Category, 2); } set { _Category = value; _SetNullable(_Category==null,2); } }

         
   string _Name;
   [DataMember(Order = 3)]
   public string Name { get { return _GetNullableValue(_Name, 3); } set { _Name = value; _SetNullable(_Name==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

         
   string _RegExp;
   [DataMember(Order = 5)]
   public string RegExp { get { return _GetNullableValue(_RegExp, 5); } set { _RegExp = value; _SetNullable(_RegExp==null,5); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=5;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetItem3
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   bool? _IsDisabled;
   [DataMember(Order = 3)]
   public bool? IsDisabled { get { return _GetNullableValue(_IsDisabled, 3); } set { _IsDisabled = value; _SetNullable(_IsDisabled==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetItem4
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=2;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region TypesGetV2Response .. 
[DataContract]
public partial class TypesGetV2Response
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<TypesGetV2Item1> ResultSet1 { get; set; }

     [DataMember(Order = 4)]
    public List<TypesGetV2Item2> ResultSet2 { get; set; }

     [DataMember(Order = 5)]
    public List<TypesGetV2Item3> ResultSet3 { get; set; }

     [DataMember(Order = 6)]
    public List<TypesGetV2Item4> ResultSet4 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class TypesGetV2Item1
    {
        
   short? _Id;
   [DataMember(Order = 1)]
   public short? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   string _Description;
   [DataMember(Order = 3)]
   public string Description { get { return _GetNullableValue(_Description, 3); } set { _Description = value; _SetNullable(_Description==null,3); } }

         
   string _RegExp;
   [DataMember(Order = 4)]
   public string RegExp { get { return _GetNullableValue(_RegExp, 4); } set { _RegExp = value; _SetNullable(_RegExp==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetV2Item2
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Category;
   [DataMember(Order = 2)]
   public string Category { get { return _GetNullableValue(_Category, 2); } set { _Category = value; _SetNullable(_Category==null,2); } }

         
   string _Name;
   [DataMember(Order = 3)]
   public string Name { get { return _GetNullableValue(_Name, 3); } set { _Name = value; _SetNullable(_Name==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

         
   string _RegExp;
   [DataMember(Order = 5)]
   public string RegExp { get { return _GetNullableValue(_RegExp, 5); } set { _RegExp = value; _SetNullable(_RegExp==null,5); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=5;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetV2Item3
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   bool? _IsDisabled;
   [DataMember(Order = 3)]
   public bool? IsDisabled { get { return _GetNullableValue(_IsDisabled, 3); } set { _IsDisabled = value; _SetNullable(_IsDisabled==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class TypesGetV2Item4
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=2;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserAddResponse .. 
[DataContract]
public partial class UserAddResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserAddItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserAddItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Username;
   [DataMember(Order = 2)]
   public string Username { get { return _GetNullableValue(_Username, 2); } set { _Username = value; _SetNullable(_Username==null,2); } }

         
   string _Password;
   [DataMember(Order = 3)]
   public string Password { get { return _GetNullableValue(_Password, 3); } set { _Password = value; _SetNullable(_Password==null,3); } }

         
   bool? _ChangePasswordRequired;
   [DataMember(Order = 4)]
   public bool? ChangePasswordRequired { get { return _GetNullableValue(_ChangePasswordRequired, 4); } set { _ChangePasswordRequired = value; _SetNullable(_ChangePasswordRequired==null,4); } }

         
   string _FullName;
   [DataMember(Order = 5)]
   public string FullName { get { return _GetNullableValue(_FullName, 5); } set { _FullName = value; _SetNullable(_FullName==null,5); } }

         
   string _Email;
   [DataMember(Order = 6)]
   public string Email { get { return _GetNullableValue(_Email, 6); } set { _Email = value; _SetNullable(_Email==null,6); } }

         
   int? _UserIdSupervisor;
   [DataMember(Order = 7)]
   public int? UserIdSupervisor { get { return _GetNullableValue(_UserIdSupervisor, 7); } set { _UserIdSupervisor = value; _SetNullable(_UserIdSupervisor==null,7); } }

         
   byte? _UserStatusTypeId;
   [DataMember(Order = 8)]
   public byte? UserStatusTypeId { get { return _GetNullableValue(_UserStatusTypeId, 8); } set { _UserStatusTypeId = value; _SetNullable(_UserStatusTypeId==null,8); } }

         
   DateTime? _LockedUntil;
   [DataMember(Order = 9)]
   public DateTime? LockedUntil { get { return _GetNullableValue(_LockedUntil, 9); } set { _LockedUntil = value; _SetNullable(_LockedUntil==null,9); } }

         
   DateTime? _DateCreated;
   [DataMember(Order = 10)]
   public DateTime? DateCreated { get { return _GetNullableValue(_DateCreated, 10); } set { _DateCreated = value; _SetNullable(_DateCreated==null,10); } }

         
   DateTime? _DateModified;
   [DataMember(Order = 11)]
   public DateTime? DateModified { get { return _GetNullableValue(_DateModified, 11); } set { _DateModified = value; _SetNullable(_DateModified==null,11); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=11;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeAddResponse .. 
[DataContract]
public partial class UserRoleTypeAddResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeAddItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeAddItem1
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   bool? _IsDisabled;
   [DataMember(Order = 3)]
   public bool? IsDisabled { get { return _GetNullableValue(_IsDisabled, 3); } set { _IsDisabled = value; _SetNullable(_IsDisabled==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeGetResponse .. 
[DataContract]
public partial class UserRoleTypeGetResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeGetItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeGetItem1
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   bool? _IsDisabled;
   [DataMember(Order = 3)]
   public bool? IsDisabled { get { return _GetNullableValue(_IsDisabled, 3); } set { _IsDisabled = value; _SetNullable(_IsDisabled==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeRestrictionAddResponse .. 
[DataContract]
public partial class UserRoleTypeRestrictionAddResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeRestrictionAddItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeRestrictionAddItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   byte? _UserRoleTypeId;
   [DataMember(Order = 2)]
   public byte? UserRoleTypeId { get { return _GetNullableValue(_UserRoleTypeId, 2); } set { _UserRoleTypeId = value; _SetNullable(_UserRoleTypeId==null,2); } }

         
   byte? _UserRoleTypeRestrictionTypeId;
   [DataMember(Order = 3)]
   public byte? UserRoleTypeRestrictionTypeId { get { return _GetNullableValue(_UserRoleTypeRestrictionTypeId, 3); } set { _UserRoleTypeRestrictionTypeId = value; _SetNullable(_UserRoleTypeRestrictionTypeId==null,3); } }

         
   string _Value;
   [DataMember(Order = 4)]
   public string Value { get { return _GetNullableValue(_Value, 4); } set { _Value = value; _SetNullable(_Value==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeRestrictionDeleteResponse .. 
[DataContract]
public partial class UserRoleTypeRestrictionDeleteResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

  
 
  
}
#endregion


#region UserRoleTypeRestrictionGetResponse .. 
[DataContract]
public partial class UserRoleTypeRestrictionGetResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeRestrictionGetItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeRestrictionGetItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   byte? _UserRoleTypeId;
   [DataMember(Order = 2)]
   public byte? UserRoleTypeId { get { return _GetNullableValue(_UserRoleTypeId, 2); } set { _UserRoleTypeId = value; _SetNullable(_UserRoleTypeId==null,2); } }

         
   byte? _UserRoleTypeRestrictionTypeId;
   [DataMember(Order = 3)]
   public byte? UserRoleTypeRestrictionTypeId { get { return _GetNullableValue(_UserRoleTypeRestrictionTypeId, 3); } set { _UserRoleTypeRestrictionTypeId = value; _SetNullable(_UserRoleTypeRestrictionTypeId==null,3); } }

         
   string _Value;
   [DataMember(Order = 4)]
   public string Value { get { return _GetNullableValue(_Value, 4); } set { _Value = value; _SetNullable(_Value==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeRestrictionUpdateResponse .. 
[DataContract]
public partial class UserRoleTypeRestrictionUpdateResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeRestrictionUpdateItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeRestrictionUpdateItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   byte? _UserRoleTypeId;
   [DataMember(Order = 2)]
   public byte? UserRoleTypeId { get { return _GetNullableValue(_UserRoleTypeId, 2); } set { _UserRoleTypeId = value; _SetNullable(_UserRoleTypeId==null,2); } }

         
   byte? _UserRoleTypeRestrictionTypeId;
   [DataMember(Order = 3)]
   public byte? UserRoleTypeRestrictionTypeId { get { return _GetNullableValue(_UserRoleTypeRestrictionTypeId, 3); } set { _UserRoleTypeRestrictionTypeId = value; _SetNullable(_UserRoleTypeRestrictionTypeId==null,3); } }

         
   string _Value;
   [DataMember(Order = 4)]
   public string Value { get { return _GetNullableValue(_Value, 4); } set { _Value = value; _SetNullable(_Value==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserRoleTypeUpdateResponse .. 
[DataContract]
public partial class UserRoleTypeUpdateResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserRoleTypeUpdateItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserRoleTypeUpdateItem1
    {
        
   byte? _Id;
   [DataMember(Order = 1)]
   public byte? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Name;
   [DataMember(Order = 2)]
   public string Name { get { return _GetNullableValue(_Name, 2); } set { _Name = value; _SetNullable(_Name==null,2); } }

         
   bool? _IsDisabled;
   [DataMember(Order = 3)]
   public bool? IsDisabled { get { return _GetNullableValue(_IsDisabled, 3); } set { _IsDisabled = value; _SetNullable(_IsDisabled==null,3); } }

         
   string _Description;
   [DataMember(Order = 4)]
   public string Description { get { return _GetNullableValue(_Description, 4); } set { _Description = value; _SetNullable(_Description==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserSessionCreateResponse .. 
[DataContract]
public partial class UserSessionCreateResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserSessionCreateItem1> ResultSet1 { get; set; }

     [DataMember(Order = 4)]
    public List<UserSessionCreateItem2> ResultSet2 { get; set; }

     [DataMember(Order = 5)]
    public List<UserSessionCreateItem3> ResultSet3 { get; set; }

     [DataMember(Order = 6)]
    public List<UserSessionCreateItem4> ResultSet4 { get; set; }

     [DataMember(Order = 7)]
    public List<UserSessionCreateItem5> ResultSet5 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserSessionCreateItem1
    {
        
   string _Token;
   [DataMember(Order = 1)]
   public string Token { get { return _GetNullableValue(_Token, 1); } set { _Token = value; _SetNullable(_Token==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   DateTime? _DateValidUntil;
   [DataMember(Order = 3)]
   public DateTime? DateValidUntil { get { return _GetNullableValue(_DateValidUntil, 3); } set { _DateValidUntil = value; _SetNullable(_DateValidUntil==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UserSessionCreateItem2
    {
        
   int? _StatusCode;
   [DataMember(Order = 1)]
   public int? StatusCode { get { return _GetNullableValue(_StatusCode, 1); } set { _StatusCode = value; _SetNullable(_StatusCode==null,1); } }

         
   string _StatusMessage;
   [DataMember(Order = 2)]
   public string StatusMessage { get { return _GetNullableValue(_StatusMessage, 2); } set { _StatusMessage = value; _SetNullable(_StatusMessage==null,2); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=2;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UserSessionCreateItem3
    {
        
   string _Token;
   [DataMember(Order = 1)]
   public string Token { get { return _GetNullableValue(_Token, 1); } set { _Token = value; _SetNullable(_Token==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   DateTime? _DateValidUntil;
   [DataMember(Order = 3)]
   public DateTime? DateValidUntil { get { return _GetNullableValue(_DateValidUntil, 3); } set { _DateValidUntil = value; _SetNullable(_DateValidUntil==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UserSessionCreateItem4
    {
        
   int? _StatusCode;
   [DataMember(Order = 1)]
   public int? StatusCode { get { return _GetNullableValue(_StatusCode, 1); } set { _StatusCode = value; _SetNullable(_StatusCode==null,1); } }

         
   string _StatusMessage;
   [DataMember(Order = 2)]
   public string StatusMessage { get { return _GetNullableValue(_StatusMessage, 2); } set { _StatusMessage = value; _SetNullable(_StatusMessage==null,2); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=2;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UserSessionCreateItem5
    {
        
   string _Token;
   [DataMember(Order = 1)]
   public string Token { get { return _GetNullableValue(_Token, 1); } set { _Token = value; _SetNullable(_Token==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   DateTime? _DateValidUntil;
   [DataMember(Order = 3)]
   public DateTime? DateValidUntil { get { return _GetNullableValue(_DateValidUntil, 3); } set { _DateValidUntil = value; _SetNullable(_DateValidUntil==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserSessionInvalidateResponse .. 
[DataContract]
public partial class UserSessionInvalidateResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserSessionInvalidateItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserSessionInvalidateItem1
    {
        
   string _Token;
   [DataMember(Order = 1)]
   public string Token { get { return _GetNullableValue(_Token, 1); } set { _Token = value; _SetNullable(_Token==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   DateTime? _DateValidUntil;
   [DataMember(Order = 3)]
   public DateTime? DateValidUntil { get { return _GetNullableValue(_DateValidUntil, 3); } set { _DateValidUntil = value; _SetNullable(_DateValidUntil==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserSessionVerifyResponse .. 
[DataContract]
public partial class UserSessionVerifyResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserSessionVerifyItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserSessionVerifyItem1
    {
        
   string _Token;
   [DataMember(Order = 1)]
   public string Token { get { return _GetNullableValue(_Token, 1); } set { _Token = value; _SetNullable(_Token==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   DateTime? _DateValidUntil;
   [DataMember(Order = 3)]
   public DateTime? DateValidUntil { get { return _GetNullableValue(_DateValidUntil, 3); } set { _DateValidUntil = value; _SetNullable(_DateValidUntil==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UsersGetResponse .. 
[DataContract]
public partial class UsersGetResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UsersGetItem1> ResultSet1 { get; set; }

     [DataMember(Order = 4)]
    public List<UsersGetItem2> ResultSet2 { get; set; }

     [DataMember(Order = 5)]
    public List<UsersGetItem3> ResultSet3 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UsersGetItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Username;
   [DataMember(Order = 2)]
   public string Username { get { return _GetNullableValue(_Username, 2); } set { _Username = value; _SetNullable(_Username==null,2); } }

         
   string _Password;
   [DataMember(Order = 3)]
   public string Password { get { return _GetNullableValue(_Password, 3); } set { _Password = value; _SetNullable(_Password==null,3); } }

         
   bool? _ChangePasswordRequired;
   [DataMember(Order = 4)]
   public bool? ChangePasswordRequired { get { return _GetNullableValue(_ChangePasswordRequired, 4); } set { _ChangePasswordRequired = value; _SetNullable(_ChangePasswordRequired==null,4); } }

         
   string _FullName;
   [DataMember(Order = 5)]
   public string FullName { get { return _GetNullableValue(_FullName, 5); } set { _FullName = value; _SetNullable(_FullName==null,5); } }

         
   string _Email;
   [DataMember(Order = 6)]
   public string Email { get { return _GetNullableValue(_Email, 6); } set { _Email = value; _SetNullable(_Email==null,6); } }

         
   int? _UserIdSupervisor;
   [DataMember(Order = 7)]
   public int? UserIdSupervisor { get { return _GetNullableValue(_UserIdSupervisor, 7); } set { _UserIdSupervisor = value; _SetNullable(_UserIdSupervisor==null,7); } }

         
   byte? _UserStatusTypeId;
   [DataMember(Order = 8)]
   public byte? UserStatusTypeId { get { return _GetNullableValue(_UserStatusTypeId, 8); } set { _UserStatusTypeId = value; _SetNullable(_UserStatusTypeId==null,8); } }

         
   DateTime? _LastLogin;
   [DataMember(Order = 9)]
   public DateTime? LastLogin { get { return _GetNullableValue(_LastLogin, 9); } set { _LastLogin = value; _SetNullable(_LastLogin==null,9); } }

         
   DateTime? _LockedUntil;
   [DataMember(Order = 10)]
   public DateTime? LockedUntil { get { return _GetNullableValue(_LockedUntil, 10); } set { _LockedUntil = value; _SetNullable(_LockedUntil==null,10); } }

         
   DateTime? _DateCreated;
   [DataMember(Order = 11)]
   public DateTime? DateCreated { get { return _GetNullableValue(_DateCreated, 11); } set { _DateCreated = value; _SetNullable(_DateCreated==null,11); } }

         
   DateTime? _DateModified;
   [DataMember(Order = 12)]
   public DateTime? DateModified { get { return _GetNullableValue(_DateModified, 12); } set { _DateModified = value; _SetNullable(_DateModified==null,12); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=12;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UsersGetItem2
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   byte? _UserRoleTypeId;
   [DataMember(Order = 3)]
   public byte? UserRoleTypeId { get { return _GetNullableValue(_UserRoleTypeId, 3); } set { _UserRoleTypeId = value; _SetNullable(_UserRoleTypeId==null,3); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=3;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
    
    [DataContract]
    public class UsersGetItem3
    {
        
   long? _Id;
   [DataMember(Order = 1)]
   public long? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   int? _UserId;
   [DataMember(Order = 2)]
   public int? UserId { get { return _GetNullableValue(_UserId, 2); } set { _UserId = value; _SetNullable(_UserId==null,2); } }

         
   short? _UserPropertyTypeId;
   [DataMember(Order = 3)]
   public short? UserPropertyTypeId { get { return _GetNullableValue(_UserPropertyTypeId, 3); } set { _UserPropertyTypeId = value; _SetNullable(_UserPropertyTypeId==null,3); } }

         
   string _Value;
   [DataMember(Order = 4)]
   public string Value { get { return _GetNullableValue(_Value, 4); } set { _Value = value; _SetNullable(_Value==null,4); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=4;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion


#region UserUpdateResponse .. 
[DataContract]
public partial class UserUpdateResponse
{
    [DataMember(Order = 1)]
    public int StatusCode { get; set; }

    [DataMember(Order = 2)]
    public string StatusMessage { get; set; } 

     [DataMember(Order = 3)]
    public List<UserUpdateItem1> ResultSet1 { get; set; }

  
 
     #region inner classes .. 
     
    [DataContract]
    public class UserUpdateItem1
    {
        
   int? _Id;
   [DataMember(Order = 1)]
   public int? Id { get { return _GetNullableValue(_Id, 1); } set { _Id = value; _SetNullable(_Id==null,1); } }

         
   string _Username;
   [DataMember(Order = 2)]
   public string Username { get { return _GetNullableValue(_Username, 2); } set { _Username = value; _SetNullable(_Username==null,2); } }

         
   string _Password;
   [DataMember(Order = 3)]
   public string Password { get { return _GetNullableValue(_Password, 3); } set { _Password = value; _SetNullable(_Password==null,3); } }

         
   bool? _ChangePasswordRequired;
   [DataMember(Order = 4)]
   public bool? ChangePasswordRequired { get { return _GetNullableValue(_ChangePasswordRequired, 4); } set { _ChangePasswordRequired = value; _SetNullable(_ChangePasswordRequired==null,4); } }

         
   string _FullName;
   [DataMember(Order = 5)]
   public string FullName { get { return _GetNullableValue(_FullName, 5); } set { _FullName = value; _SetNullable(_FullName==null,5); } }

         
   string _Email;
   [DataMember(Order = 6)]
   public string Email { get { return _GetNullableValue(_Email, 6); } set { _Email = value; _SetNullable(_Email==null,6); } }

         
   int? _UserIdSupervisor;
   [DataMember(Order = 7)]
   public int? UserIdSupervisor { get { return _GetNullableValue(_UserIdSupervisor, 7); } set { _UserIdSupervisor = value; _SetNullable(_UserIdSupervisor==null,7); } }

         
   byte? _UserStatusTypeId;
   [DataMember(Order = 8)]
   public byte? UserStatusTypeId { get { return _GetNullableValue(_UserStatusTypeId, 8); } set { _UserStatusTypeId = value; _SetNullable(_UserStatusTypeId==null,8); } }

         
   DateTime? _LockedUntil;
   [DataMember(Order = 9)]
   public DateTime? LockedUntil { get { return _GetNullableValue(_LockedUntil, 9); } set { _LockedUntil = value; _SetNullable(_LockedUntil==null,9); } }

         
   DateTime? _DateCreated;
   [DataMember(Order = 10)]
   public DateTime? DateCreated { get { return _GetNullableValue(_DateCreated, 10); } set { _DateCreated = value; _SetNullable(_DateCreated==null,10); } }

         
   DateTime? _DateModified;
   [DataMember(Order = 11)]
   public DateTime? DateModified { get { return _GetNullableValue(_DateModified, 11); } set { _DateModified = value; _SetNullable(_DateModified==null,11); } }

               
    #region nullable hack...
 
   private BitArray ___Nulables;
   private static int _MaxOrder=11;
   
   [DataMember(Order = 10000)]
   public byte[] __Nullables { get{ return ___Nulables.ToBytes();} set{ if (value != null) { ___Nulables = new BitArray(value); } else { ___Nulables = null; }; } }

   
  private void _SetNullable(bool isNullValue, int order)
  {
    if (___Nulables == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable{order} is greater than MaxOrder: {_MaxOrder}");
    if (___Nulables == null) ___Nulables = new BitArray(_MaxOrder);
    ___Nulables.Set(order-1, isNullValue);          
      
  }
  private  T _GetNullableValue<T>(T value, int order)
  {
     if (order > _MaxOrder) throw new Exception($"_SetNullable Invalid Generation Order{order} is greater than max order{_MaxOrder} ");
     if (___Nulables == null) return value;
     if (___Nulables.Get(order-1)) return default;
     return value;
  }

#endregion
 
    }
     
    #endregion
  
}
#endregion

  
     
}

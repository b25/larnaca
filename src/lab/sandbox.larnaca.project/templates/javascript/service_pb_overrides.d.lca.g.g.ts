

// <auto-generated>
//     This code was generated at 2020-09-04 01:21:12.610 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// package: mssql.adapter.Dui
// file: service.proto

/* tslint:disable */
/* eslint-disable */

import * as service from "./service_pb";
import * as protobuf_net_bcl_pb from "./protobuf-net/bcl_pb";


export declare class ConceptInstanceIdsForUserRequest extends service.ConceptInstanceIdsForUserRequest {
    getUserid(): number | undefined;
    //@ts-ignore
    setUserid(value?: number): ConceptInstanceIdsForUserRequest;

    getLanguagecode(): string | undefined;
    //@ts-ignore
    setLanguagecode(value?: string): ConceptInstanceIdsForUserRequest;

    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): ConceptInstanceIdsForUserRequest;

    //@ts-ignore
    getInstanceidsList(): Array<TVPinstance_ids>;
    //@ts-ignore
    setInstanceidsList(value: Array<TVPinstance_ids>): ConceptInstanceIdsForUserRequest;
    //@ts-ignore
    addInstanceids(value?: TVPinstance_ids, index?: number): TVPinstance_ids;

    //@ts-ignore
    toObject(includeInstance?: boolean): ConceptInstanceIdsForUserRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ConceptInstanceIdsForUserRequest): ConceptInstanceIdsForUserRequest.AsObject;
}

export namespace ConceptInstanceIdsForUserRequest {
    export type AsObject = {
        userid: number | undefined;
        languagecode: string | undefined;
        conceptid: number | undefined;
        instanceids: Array<TVPinstance_ids> | undefined;
    }
}

export declare class TVPinstance_ids extends service.TVPinstance_ids {   
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TVPinstance_ids;

    //@ts-ignore
    toObject(includeInstance?: boolean): TVPinstance_ids.AsObject;
    static toObject(includeInstance: boolean, msg: TVPinstance_ids): TVPinstance_ids.AsObject;
}

export namespace TVPinstance_ids {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class ConceptInstanceIdsForUserResponse extends service.ConceptInstanceIdsForUserResponse {
    getStatuscode(): number;
    //@ts-ignore
    setStatuscode(value: number): ConceptInstanceIdsForUserResponse;

    getStatusmessage(): string;
    //@ts-ignore
    setStatusmessage(value: string): ConceptInstanceIdsForUserResponse;

    //@ts-ignore
    getResultset1List(): Array<ConceptInstanceIdsForUserItem1>;
    //@ts-ignore
    setResultset1List(value: Array<ConceptInstanceIdsForUserItem1>): ConceptInstanceIdsForUserResponse;
    //@ts-ignore
    addResultset1(value?: ConceptInstanceIdsForUserItem1, index?: number): ConceptInstanceIdsForUserItem1;

    //@ts-ignore
    getResultset2List(): Array<ConceptInstanceIdsForUserItem2>;
    //@ts-ignore
    setResultset2List(value: Array<ConceptInstanceIdsForUserItem2>): ConceptInstanceIdsForUserResponse;
    //@ts-ignore
    addResultset2(value?: ConceptInstanceIdsForUserItem2, index?: number): ConceptInstanceIdsForUserItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): ConceptInstanceIdsForUserResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ConceptInstanceIdsForUserResponse): ConceptInstanceIdsForUserResponse.AsObject;
}

export namespace ConceptInstanceIdsForUserResponse {
    export type AsObject = {
        statuscode: number,
        statusmessage: string,
        resultset1List: Array<ConceptInstanceIdsForUserItem1>;
        resultset2List: Array<ConceptInstanceIdsForUserItem2>;
    }
}


export declare class ConceptInstanceIdsForUserItem1 extends service.ConceptInstanceIdsForUserItem1 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): ConceptInstanceIdsForUserItem1;

    //@ts-ignore
    toObject(includeInstance?: boolean): ConceptInstanceIdsForUserItem1.AsObject;
    static toObject(includeInstance: boolean, msg: ConceptInstanceIdsForUserItem1): ConceptInstanceIdsForUserItem1.AsObject;
}

export namespace ConceptInstanceIdsForUserItem1 {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class ConceptInstanceIdsForUserItem2 extends service.ConceptInstanceIdsForUserItem2 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): ConceptInstanceIdsForUserItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): ConceptInstanceIdsForUserItem2.AsObject;
    static toObject(includeInstance: boolean, msg: ConceptInstanceIdsForUserItem2): ConceptInstanceIdsForUserItem2.AsObject;
}

export namespace ConceptInstanceIdsForUserItem2 {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class NavigateRequest extends service.NavigateRequest {
    getUserid(): number | undefined;
    //@ts-ignore
    setUserid(value?: number): NavigateRequest;

    getLanguagecode(): string | undefined;
    //@ts-ignore
    setLanguagecode(value?: string): NavigateRequest;

    getPath(): string | undefined;
    //@ts-ignore
    setPath(value?: string): NavigateRequest;

    getDisplayoption(): number | undefined;
    //@ts-ignore
    setDisplayoption(value?: number): NavigateRequest;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateRequest): NavigateRequest.AsObject;
}

export namespace NavigateRequest {
    export type AsObject = {
        userid: number | undefined;
        languagecode: string | undefined;
        path: string | undefined;
        displayoption: number | undefined;
    }
}


export declare class NavigateResponse extends service.NavigateResponse {
    getStatuscode(): number;
    //@ts-ignore
    setStatuscode(value: number): NavigateResponse;

    getStatusmessage(): string;
    //@ts-ignore
    setStatusmessage(value: string): NavigateResponse;

    //@ts-ignore
    getResultset1List(): Array<NavigateItem1>;
    //@ts-ignore
    setResultset1List(value: Array<NavigateItem1>): NavigateResponse;
    //@ts-ignore
    addResultset1(value?: NavigateItem1, index?: number): NavigateItem1;

    //@ts-ignore
    getResultset2List(): Array<NavigateItem2>;
    //@ts-ignore
    setResultset2List(value: Array<NavigateItem2>): NavigateResponse;
    //@ts-ignore
    addResultset2(value?: NavigateItem2, index?: number): NavigateItem2;

    //@ts-ignore
    getResultset3List(): Array<NavigateItem3>;
    //@ts-ignore
    setResultset3List(value: Array<NavigateItem3>): NavigateResponse;
    //@ts-ignore
    addResultset3(value?: NavigateItem3, index?: number): NavigateItem3;

    //@ts-ignore
    getResultset4List(): Array<NavigateItem4>;
    //@ts-ignore
    setResultset4List(value: Array<NavigateItem4>): NavigateResponse;
    //@ts-ignore
    addResultset4(value?: NavigateItem4, index?: number): NavigateItem4;

    //@ts-ignore
    getResultset5List(): Array<NavigateItem5>;
    //@ts-ignore
    setResultset5List(value: Array<NavigateItem5>): NavigateResponse;
    //@ts-ignore
    addResultset5(value?: NavigateItem5, index?: number): NavigateItem5;

    //@ts-ignore
    getResultset6List(): Array<NavigateItem6>;
    //@ts-ignore
    setResultset6List(value: Array<NavigateItem6>): NavigateResponse;
    //@ts-ignore
    addResultset6(value?: NavigateItem6, index?: number): NavigateItem6;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateResponse): NavigateResponse.AsObject;
}

export namespace NavigateResponse {
    export type AsObject = {
        statuscode: number,
        statusmessage: string,
        resultset1List: Array<NavigateItem1>;
        resultset2List: Array<NavigateItem2>;
        resultset3List: Array<NavigateItem3>;
        resultset4List: Array<NavigateItem4>;
        resultset5List: Array<NavigateItem5>;
        resultset6List: Array<NavigateItem6>;
    }
}


export declare class NavigateItem1 extends service.NavigateItem1 {
    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): NavigateItem1;

    getInstanceid(): number | undefined;
    //@ts-ignore
    setInstanceid(value?: number): NavigateItem1;

    getDescription(): string | undefined;
    //@ts-ignore
    setDescription(value?: string): NavigateItem1;

    getIsselected(): number | undefined;
    //@ts-ignore
    setIsselected(value?: number): NavigateItem1;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem1.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem1): NavigateItem1.AsObject;
}

export namespace NavigateItem1 {
    export type AsObject = {
        conceptid: number | undefined;
        instanceid: number | undefined;
        description: string | undefined;
        isselected: number | undefined;
    }
}


export declare class NavigateItem2 extends service.NavigateItem2 {
    getRelationshipid(): number | undefined;
    //@ts-ignore
    setRelationshipid(value?: number): NavigateItem2;

    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): NavigateItem2;

    getConceptname(): string | undefined;
    //@ts-ignore
    setConceptname(value?: string): NavigateItem2;

    getConceptdescription(): string | undefined;
    //@ts-ignore
    setConceptdescription(value?: string): NavigateItem2;

    getAllowsmultiselect(): boolean | undefined;
    //@ts-ignore
    setAllowsmultiselect(value?: boolean): NavigateItem2;

    getMustbefiltered(): boolean | undefined;
    //@ts-ignore
    setMustbefiltered(value?: boolean): NavigateItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem2.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem2): NavigateItem2.AsObject;
}

export namespace NavigateItem2 {
    export type AsObject = {
        relationshipid: number | undefined;
        conceptid: number | undefined;
        conceptname: string | undefined;
        conceptdescription: string | undefined;
        allowsmultiselect: boolean | undefined;
        mustbefiltered: boolean | undefined;
    }
}


export declare class NavigateItem3 extends service.NavigateItem3 {
    getActionid(): number | undefined;
    //@ts-ignore
    setActionid(value?: number): NavigateItem3;

    getActionname(): string | undefined;
    //@ts-ignore
    setActionname(value?: string): NavigateItem3;

    getActiondescription(): string | undefined;
    //@ts-ignore
    setActiondescription(value?: string): NavigateItem3;

    getActiontypeid(): number | undefined;
    //@ts-ignore
    setActiontypeid(value?: number): NavigateItem3;

    getActionprocdatabase(): string | undefined;
    //@ts-ignore
    setActionprocdatabase(value?: string): NavigateItem3;

    getActionprocschema(): string | undefined;
    //@ts-ignore
    setActionprocschema(value?: string): NavigateItem3;

    getActionprocname(): string | undefined;
    //@ts-ignore
    setActionprocname(value?: string): NavigateItem3;

    getIsbulkaction(): boolean | undefined;
    //@ts-ignore
    setIsbulkaction(value?: boolean): NavigateItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem3.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem3): NavigateItem3.AsObject;
}

export namespace NavigateItem3 {
    export type AsObject = {
        actionid: number | undefined;
        actionname: string | undefined;
        actiondescription: string | undefined;
        actiontypeid: number | undefined;
        actionprocdatabase: string | undefined;
        actionprocschema: string | undefined;
        actionprocname: string | undefined;
        isbulkaction: boolean | undefined;
    }
}


export declare class NavigateItem4 extends service.NavigateItem4 {
    getFilterid(): number | undefined;
    //@ts-ignore
    setFilterid(value?: number): NavigateItem4;

    getFiltername(): string | undefined;
    //@ts-ignore
    setFiltername(value?: string): NavigateItem4;

    getFilterdescription(): string | undefined;
    //@ts-ignore
    setFilterdescription(value?: string): NavigateItem4;

    getFiltertypeid(): number | undefined;
    //@ts-ignore
    setFiltertypeid(value?: number): NavigateItem4;

    getFilterprocdatabase(): string | undefined;
    //@ts-ignore
    setFilterprocdatabase(value?: string): NavigateItem4;

    getFilterprocschema(): string | undefined;
    //@ts-ignore
    setFilterprocschema(value?: string): NavigateItem4;

    getFilterprocname(): string | undefined;
    //@ts-ignore
    setFilterprocname(value?: string): NavigateItem4;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem4.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem4): NavigateItem4.AsObject;
}

export namespace NavigateItem4 {
    export type AsObject = {
        filterid: number | undefined;
        filtername: string | undefined;
        filterdescription: string | undefined;
        filtertypeid: number | undefined;
        filterprocdatabase: string | undefined;
        filterprocschema: string | undefined;
        filterprocname: string | undefined;
    }
}


export declare class NavigateItem5 extends service.NavigateItem5 {
    getReportid(): number | undefined;
    //@ts-ignore
    setReportid(value?: number): NavigateItem5;

    getReportname(): string | undefined;
    //@ts-ignore
    setReportname(value?: string): NavigateItem5;

    getReportdescription(): string | undefined;
    //@ts-ignore
    setReportdescription(value?: string): NavigateItem5;

    getReporttypeid(): number | undefined;
    //@ts-ignore
    setReporttypeid(value?: number): NavigateItem5;

    getReportprocdatabase(): string | undefined;
    //@ts-ignore
    setReportprocdatabase(value?: string): NavigateItem5;

    getReportprocschema(): string | undefined;
    //@ts-ignore
    setReportprocschema(value?: string): NavigateItem5;

    getReportprocname(): string | undefined;
    //@ts-ignore
    setReportprocname(value?: string): NavigateItem5;

    getMustbefiltered(): boolean | undefined;
    //@ts-ignore
    setMustbefiltered(value?: boolean): NavigateItem5;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem5.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem5): NavigateItem5.AsObject;
}

export namespace NavigateItem5 {
    export type AsObject = {
        reportid: number | undefined;
        reportname: string | undefined;
        reportdescription: string | undefined;
        reporttypeid: number | undefined;
        reportprocdatabase: string | undefined;
        reportprocschema: string | undefined;
        reportprocname: string | undefined;
        mustbefiltered: boolean | undefined;
    }
}


export declare class NavigateItem6 extends service.NavigateItem6 {
    getReportid(): number | undefined;
    //@ts-ignore
    setReportid(value?: number): NavigateItem6;

    getActionid(): number | undefined;
    //@ts-ignore
    setActionid(value?: number): NavigateItem6;

    getActionname(): string | undefined;
    //@ts-ignore
    setActionname(value?: string): NavigateItem6;

    getActiondescription(): string | undefined;
    //@ts-ignore
    setActiondescription(value?: string): NavigateItem6;

    getActiontypeid(): number | undefined;
    //@ts-ignore
    setActiontypeid(value?: number): NavigateItem6;

    getActionprocdatabase(): string | undefined;
    //@ts-ignore
    setActionprocdatabase(value?: string): NavigateItem6;

    getActionprocschema(): string | undefined;
    //@ts-ignore
    setActionprocschema(value?: string): NavigateItem6;

    getActionprocname(): string | undefined;
    //@ts-ignore
    setActionprocname(value?: string): NavigateItem6;

    getIsbulkaction(): boolean | undefined;
    //@ts-ignore
    setIsbulkaction(value?: boolean): NavigateItem6;

    //@ts-ignore
    toObject(includeInstance?: boolean): NavigateItem6.AsObject;
    static toObject(includeInstance: boolean, msg: NavigateItem6): NavigateItem6.AsObject;
}

export namespace NavigateItem6 {
    export type AsObject = {
        reportid: number | undefined;
        actionid: number | undefined;
        actionname: string | undefined;
        actiondescription: string | undefined;
        actiontypeid: number | undefined;
        actionprocdatabase: string | undefined;
        actionprocschema: string | undefined;
        actionprocname: string | undefined;
        isbulkaction: boolean | undefined;
    }
}


export declare class TestActionVideosEditRequest extends service.TestActionVideosEditRequest {
    getUserid(): number | undefined;
    //@ts-ignore
    setUserid(value?: number): TestActionVideosEditRequest;

    getLanguagecode(): string | undefined;
    //@ts-ignore
    setLanguagecode(value?: string): TestActionVideosEditRequest;

    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): TestActionVideosEditRequest;

    //@ts-ignore
    getConceptinstanceidsList(): Array<TVPconcept_instance_ids>;
    //@ts-ignore
    setConceptinstanceidsList(value: Array<TVPconcept_instance_ids>): TestActionVideosEditRequest;
    //@ts-ignore
    addConceptinstanceids(value?: TVPconcept_instance_ids, index?: number): TVPconcept_instance_ids;

    getRequest(): string | undefined;
    //@ts-ignore
    setRequest(value?: string): TestActionVideosEditRequest;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestActionVideosEditRequest.AsObject;
    static toObject(includeInstance: boolean, msg: TestActionVideosEditRequest): TestActionVideosEditRequest.AsObject;
}

export namespace TestActionVideosEditRequest {
    export type AsObject = {
        userid: number | undefined;
        languagecode: string | undefined;
        conceptid: number | undefined;
        conceptinstanceids: Array<TVPconcept_instance_ids> | undefined;
        request: string | undefined;
    }
}

export declare class TVPconcept_instance_ids extends service.TVPconcept_instance_ids {   
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TVPconcept_instance_ids;

    //@ts-ignore
    toObject(includeInstance?: boolean): TVPconcept_instance_ids.AsObject;
    static toObject(includeInstance: boolean, msg: TVPconcept_instance_ids): TVPconcept_instance_ids.AsObject;
}

export namespace TVPconcept_instance_ids {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class TestActionVideosEditResponse extends service.TestActionVideosEditResponse {
    getStatuscode(): number;
    //@ts-ignore
    setStatuscode(value: number): TestActionVideosEditResponse;

    getStatusmessage(): string;
    //@ts-ignore
    setStatusmessage(value: string): TestActionVideosEditResponse;

    //@ts-ignore
    getResultset1List(): Array<TestActionVideosEditItem1>;
    //@ts-ignore
    setResultset1List(value: Array<TestActionVideosEditItem1>): TestActionVideosEditResponse;
    //@ts-ignore
    addResultset1(value?: TestActionVideosEditItem1, index?: number): TestActionVideosEditItem1;

    //@ts-ignore
    getResultset2List(): Array<TestActionVideosEditItem2>;
    //@ts-ignore
    setResultset2List(value: Array<TestActionVideosEditItem2>): TestActionVideosEditResponse;
    //@ts-ignore
    addResultset2(value?: TestActionVideosEditItem2, index?: number): TestActionVideosEditItem2;

    //@ts-ignore
    getResultset3List(): Array<TestActionVideosEditItem3>;
    //@ts-ignore
    setResultset3List(value: Array<TestActionVideosEditItem3>): TestActionVideosEditResponse;
    //@ts-ignore
    addResultset3(value?: TestActionVideosEditItem3, index?: number): TestActionVideosEditItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestActionVideosEditResponse.AsObject;
    static toObject(includeInstance: boolean, msg: TestActionVideosEditResponse): TestActionVideosEditResponse.AsObject;
}

export namespace TestActionVideosEditResponse {
    export type AsObject = {
        statuscode: number,
        statusmessage: string,
        resultset1List: Array<TestActionVideosEditItem1>;
        resultset2List: Array<TestActionVideosEditItem2>;
        resultset3List: Array<TestActionVideosEditItem3>;
    }
}


export declare class TestActionVideosEditItem1 extends service.TestActionVideosEditItem1 {
    getMetadata(): string | undefined;
    //@ts-ignore
    setMetadata(value?: string): TestActionVideosEditItem1;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestActionVideosEditItem1.AsObject;
    static toObject(includeInstance: boolean, msg: TestActionVideosEditItem1): TestActionVideosEditItem1.AsObject;
}

export namespace TestActionVideosEditItem1 {
    export type AsObject = {
        metadata: string | undefined;
    }
}


export declare class TestActionVideosEditItem2 extends service.TestActionVideosEditItem2 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TestActionVideosEditItem2;

    getLabel(): string | undefined;
    //@ts-ignore
    setLabel(value?: string): TestActionVideosEditItem2;

    getIsselected(): boolean | undefined;
    //@ts-ignore
    setIsselected(value?: boolean): TestActionVideosEditItem2;

    getPid(): number | undefined;
    //@ts-ignore
    setPid(value?: number): TestActionVideosEditItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestActionVideosEditItem2.AsObject;
    static toObject(includeInstance: boolean, msg: TestActionVideosEditItem2): TestActionVideosEditItem2.AsObject;
}

export namespace TestActionVideosEditItem2 {
    export type AsObject = {
        id: number | undefined;
        label: string | undefined;
        isselected: boolean | undefined;
        pid: number | undefined;
    }
}


export declare class TestActionVideosEditItem3 extends service.TestActionVideosEditItem3 {
    getResponse(): string | undefined;
    //@ts-ignore
    setResponse(value?: string): TestActionVideosEditItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestActionVideosEditItem3.AsObject;
    static toObject(includeInstance: boolean, msg: TestActionVideosEditItem3): TestActionVideosEditItem3.AsObject;
}

export namespace TestActionVideosEditItem3 {
    export type AsObject = {
        response: string | undefined;
    }
}


export declare class TestFilterVideosDurationRangeRequest extends service.TestFilterVideosDurationRangeRequest {
    getUserid(): number | undefined;
    //@ts-ignore
    setUserid(value?: number): TestFilterVideosDurationRangeRequest;

    getLanguagecode(): string | undefined;
    //@ts-ignore
    setLanguagecode(value?: string): TestFilterVideosDurationRangeRequest;

    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): TestFilterVideosDurationRangeRequest;

    //@ts-ignore
    getConceptinstanceidsList(): Array<TVPconcept_instance_ids>;
    //@ts-ignore
    setConceptinstanceidsList(value: Array<TVPconcept_instance_ids>): TestFilterVideosDurationRangeRequest;
    //@ts-ignore
    addConceptinstanceids(value?: TVPconcept_instance_ids, index?: number): TVPconcept_instance_ids;

    getRequest(): string | undefined;
    //@ts-ignore
    setRequest(value?: string): TestFilterVideosDurationRangeRequest;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestFilterVideosDurationRangeRequest.AsObject;
    static toObject(includeInstance: boolean, msg: TestFilterVideosDurationRangeRequest): TestFilterVideosDurationRangeRequest.AsObject;
}

export namespace TestFilterVideosDurationRangeRequest {
    export type AsObject = {
        userid: number | undefined;
        languagecode: string | undefined;
        conceptid: number | undefined;
        conceptinstanceids: Array<TVPconcept_instance_ids> | undefined;
        request: string | undefined;
    }
}

export declare class TVPconcept_instance_ids extends service.TVPconcept_instance_ids {   
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TVPconcept_instance_ids;

    //@ts-ignore
    toObject(includeInstance?: boolean): TVPconcept_instance_ids.AsObject;
    static toObject(includeInstance: boolean, msg: TVPconcept_instance_ids): TVPconcept_instance_ids.AsObject;
}

export namespace TVPconcept_instance_ids {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class TestFilterVideosDurationRangeResponse extends service.TestFilterVideosDurationRangeResponse {
    getStatuscode(): number;
    //@ts-ignore
    setStatuscode(value: number): TestFilterVideosDurationRangeResponse;

    getStatusmessage(): string;
    //@ts-ignore
    setStatusmessage(value: string): TestFilterVideosDurationRangeResponse;

    //@ts-ignore
    getResultset1List(): Array<TestFilterVideosDurationRangeItem1>;
    //@ts-ignore
    setResultset1List(value: Array<TestFilterVideosDurationRangeItem1>): TestFilterVideosDurationRangeResponse;
    //@ts-ignore
    addResultset1(value?: TestFilterVideosDurationRangeItem1, index?: number): TestFilterVideosDurationRangeItem1;

    //@ts-ignore
    getResultset2List(): Array<TestFilterVideosDurationRangeItem2>;
    //@ts-ignore
    setResultset2List(value: Array<TestFilterVideosDurationRangeItem2>): TestFilterVideosDurationRangeResponse;
    //@ts-ignore
    addResultset2(value?: TestFilterVideosDurationRangeItem2, index?: number): TestFilterVideosDurationRangeItem2;

    //@ts-ignore
    getResultset3List(): Array<TestFilterVideosDurationRangeItem3>;
    //@ts-ignore
    setResultset3List(value: Array<TestFilterVideosDurationRangeItem3>): TestFilterVideosDurationRangeResponse;
    //@ts-ignore
    addResultset3(value?: TestFilterVideosDurationRangeItem3, index?: number): TestFilterVideosDurationRangeItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestFilterVideosDurationRangeResponse.AsObject;
    static toObject(includeInstance: boolean, msg: TestFilterVideosDurationRangeResponse): TestFilterVideosDurationRangeResponse.AsObject;
}

export namespace TestFilterVideosDurationRangeResponse {
    export type AsObject = {
        statuscode: number,
        statusmessage: string,
        resultset1List: Array<TestFilterVideosDurationRangeItem1>;
        resultset2List: Array<TestFilterVideosDurationRangeItem2>;
        resultset3List: Array<TestFilterVideosDurationRangeItem3>;
    }
}


export declare class TestFilterVideosDurationRangeItem1 extends service.TestFilterVideosDurationRangeItem1 {
    getMetadata(): string | undefined;
    //@ts-ignore
    setMetadata(value?: string): TestFilterVideosDurationRangeItem1;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestFilterVideosDurationRangeItem1.AsObject;
    static toObject(includeInstance: boolean, msg: TestFilterVideosDurationRangeItem1): TestFilterVideosDurationRangeItem1.AsObject;
}

export namespace TestFilterVideosDurationRangeItem1 {
    export type AsObject = {
        metadata: string | undefined;
    }
}


export declare class TestFilterVideosDurationRangeItem2 extends service.TestFilterVideosDurationRangeItem2 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TestFilterVideosDurationRangeItem2;

    getLabel(): string | undefined;
    //@ts-ignore
    setLabel(value?: string): TestFilterVideosDurationRangeItem2;

    getIsselected(): boolean | undefined;
    //@ts-ignore
    setIsselected(value?: boolean): TestFilterVideosDurationRangeItem2;

    getPid(): number | undefined;
    //@ts-ignore
    setPid(value?: number): TestFilterVideosDurationRangeItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestFilterVideosDurationRangeItem2.AsObject;
    static toObject(includeInstance: boolean, msg: TestFilterVideosDurationRangeItem2): TestFilterVideosDurationRangeItem2.AsObject;
}

export namespace TestFilterVideosDurationRangeItem2 {
    export type AsObject = {
        id: number | undefined;
        label: string | undefined;
        isselected: boolean | undefined;
        pid: number | undefined;
    }
}


export declare class TestFilterVideosDurationRangeItem3 extends service.TestFilterVideosDurationRangeItem3 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TestFilterVideosDurationRangeItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestFilterVideosDurationRangeItem3.AsObject;
    static toObject(includeInstance: boolean, msg: TestFilterVideosDurationRangeItem3): TestFilterVideosDurationRangeItem3.AsObject;
}

export namespace TestFilterVideosDurationRangeItem3 {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class TestReportCustomersRequest extends service.TestReportCustomersRequest {
    getUserid(): number | undefined;
    //@ts-ignore
    setUserid(value?: number): TestReportCustomersRequest;

    getLanguagecode(): string | undefined;
    //@ts-ignore
    setLanguagecode(value?: string): TestReportCustomersRequest;

    getConceptid(): number | undefined;
    //@ts-ignore
    setConceptid(value?: number): TestReportCustomersRequest;

    //@ts-ignore
    getConceptinstanceidsList(): Array<TVPconcept_instance_ids>;
    //@ts-ignore
    setConceptinstanceidsList(value: Array<TVPconcept_instance_ids>): TestReportCustomersRequest;
    //@ts-ignore
    addConceptinstanceids(value?: TVPconcept_instance_ids, index?: number): TVPconcept_instance_ids;

    getRequest(): string | undefined;
    //@ts-ignore
    setRequest(value?: string): TestReportCustomersRequest;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersRequest.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersRequest): TestReportCustomersRequest.AsObject;
}

export namespace TestReportCustomersRequest {
    export type AsObject = {
        userid: number | undefined;
        languagecode: string | undefined;
        conceptid: number | undefined;
        conceptinstanceids: Array<TVPconcept_instance_ids> | undefined;
        request: string | undefined;
    }
}

export declare class TVPconcept_instance_ids extends service.TVPconcept_instance_ids {   
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TVPconcept_instance_ids;

    //@ts-ignore
    toObject(includeInstance?: boolean): TVPconcept_instance_ids.AsObject;
    static toObject(includeInstance: boolean, msg: TVPconcept_instance_ids): TVPconcept_instance_ids.AsObject;
}

export namespace TVPconcept_instance_ids {
    export type AsObject = {
        id: number | undefined;
    }
}


export declare class TestReportCustomersResponse extends service.TestReportCustomersResponse {
    getStatuscode(): number;
    //@ts-ignore
    setStatuscode(value: number): TestReportCustomersResponse;

    getStatusmessage(): string;
    //@ts-ignore
    setStatusmessage(value: string): TestReportCustomersResponse;

    //@ts-ignore
    getResultset1List(): Array<TestReportCustomersItem1>;
    //@ts-ignore
    setResultset1List(value: Array<TestReportCustomersItem1>): TestReportCustomersResponse;
    //@ts-ignore
    addResultset1(value?: TestReportCustomersItem1, index?: number): TestReportCustomersItem1;

    //@ts-ignore
    getResultset2List(): Array<TestReportCustomersItem2>;
    //@ts-ignore
    setResultset2List(value: Array<TestReportCustomersItem2>): TestReportCustomersResponse;
    //@ts-ignore
    addResultset2(value?: TestReportCustomersItem2, index?: number): TestReportCustomersItem2;

    //@ts-ignore
    getResultset3List(): Array<TestReportCustomersItem3>;
    //@ts-ignore
    setResultset3List(value: Array<TestReportCustomersItem3>): TestReportCustomersResponse;
    //@ts-ignore
    addResultset3(value?: TestReportCustomersItem3, index?: number): TestReportCustomersItem3;

    //@ts-ignore
    getResultset4List(): Array<TestReportCustomersItem4>;
    //@ts-ignore
    setResultset4List(value: Array<TestReportCustomersItem4>): TestReportCustomersResponse;
    //@ts-ignore
    addResultset4(value?: TestReportCustomersItem4, index?: number): TestReportCustomersItem4;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersResponse.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersResponse): TestReportCustomersResponse.AsObject;
}

export namespace TestReportCustomersResponse {
    export type AsObject = {
        statuscode: number,
        statusmessage: string,
        resultset1List: Array<TestReportCustomersItem1>;
        resultset2List: Array<TestReportCustomersItem2>;
        resultset3List: Array<TestReportCustomersItem3>;
        resultset4List: Array<TestReportCustomersItem4>;
    }
}


export declare class TestReportCustomersItem1 extends service.TestReportCustomersItem1 {
    getMetadata(): string | undefined;
    //@ts-ignore
    setMetadata(value?: string): TestReportCustomersItem1;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersItem1.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersItem1): TestReportCustomersItem1.AsObject;
}

export namespace TestReportCustomersItem1 {
    export type AsObject = {
        metadata: string | undefined;
    }
}


export declare class TestReportCustomersItem2 extends service.TestReportCustomersItem2 {
    getId(): number | undefined;
    //@ts-ignore
    setId(value?: number): TestReportCustomersItem2;

    getLabel(): string | undefined;
    //@ts-ignore
    setLabel(value?: string): TestReportCustomersItem2;

    getIsselected(): boolean | undefined;
    //@ts-ignore
    setIsselected(value?: boolean): TestReportCustomersItem2;

    getPid(): number | undefined;
    //@ts-ignore
    setPid(value?: number): TestReportCustomersItem2;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersItem2.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersItem2): TestReportCustomersItem2.AsObject;
}

export namespace TestReportCustomersItem2 {
    export type AsObject = {
        id: number | undefined;
        label: string | undefined;
        isselected: boolean | undefined;
        pid: number | undefined;
    }
}


export declare class TestReportCustomersItem3 extends service.TestReportCustomersItem3 {
    getResults(): Uint8Array | undefined;
    //@ts-ignore
    setResults(value?: Uint8Array): TestReportCustomersItem3;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersItem3.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersItem3): TestReportCustomersItem3.AsObject;
}

export namespace TestReportCustomersItem3 {
    export type AsObject = {
        results: Uint8Array | undefined;
    }
}


export declare class TestReportCustomersItem4 extends service.TestReportCustomersItem4 {
    getResults(): string | undefined;
    //@ts-ignore
    setResults(value?: string): TestReportCustomersItem4;

    //@ts-ignore
    toObject(includeInstance?: boolean): TestReportCustomersItem4.AsObject;
    static toObject(includeInstance: boolean, msg: TestReportCustomersItem4): TestReportCustomersItem4.AsObject;
}

export namespace TestReportCustomersItem4 {
    export type AsObject = {
        results: string | undefined;
    }
}

